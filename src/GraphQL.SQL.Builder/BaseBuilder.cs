using GraphQL.SQL.Builder.Domain;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;

namespace GraphQL.SQL.Builder
{
    public class BaseBuilder<T>
    {
        private readonly Dictionary<string, SqlParameter> _parameters = new Dictionary<string, SqlParameter>();

        public Dictionary<string, SqlParameter> Parameters
        {
            get { return _parameters; }
        }

        private int _paramCount = 0;

        public BaseBuilder()
        {
        }

        /// <summary>
        /// Adds a command parameter and returns the new parameter name
        /// Optional parameter name will only be used if it does not already exist else a autogenerated name will be used.
        /// </summary>
        /// <param name="value">Parameter value.</param>
        /// <param name="type">SqlDbType.</param>
        /// <param name="name">Parameter name exclude @ symbol.</param>
        /// <returns>Parameter name.</returns>
        public string AddParam(object value, SqlDbType type, string name = "")
        {
            var paramter = new SqlParameter(GetParameterName(name), value)
            {
                SqlDbType = type
            };
            AddParameter(paramter);
            return paramter.ParameterName;
        }

        private void AddParameter(SqlParameter parameter)
        {
            _parameters.Add(parameter.ParameterName, parameter);
            _paramCount++;
        }

        private string GetParameterName(string name)
        {
            var paramName = name == string.Empty ? $"@p_{_paramCount}" : $"@{name}";
            if (_parameters.ContainsKey(paramName))
            {
                paramName = $"{paramName}_{_paramCount}";
            };
            return paramName;
        }

        public string AddParam(object value, string name = "", string type = "")
        {

            var parameter = new SqlParameter(GetParameterName(name), value);
            if (!string.IsNullOrWhiteSpace(type))
            {
                parameter.SqlDbType = type.ToSqlDbType();
            };
            AddParameter(parameter);
            return parameter.ParameterName;
        }

        public SqlCommand ToCommand()
        {
            var sqlCommand = new SqlCommand(this.ToString());
            foreach (var param in this.Parameters)
            {
                sqlCommand.Parameters.Add(param.Value);
            }

            return sqlCommand;
        }
    }
}
